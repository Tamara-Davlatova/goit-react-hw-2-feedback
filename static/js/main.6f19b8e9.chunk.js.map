{"version":3,"sources":["Components/Buttons/Buttons.js","Components/Notification/Notification.js","Components/Statistics/Statistics.js","Components/Section/Section.js","App.js","reportWebVitals.js","index.js","Components/Buttons/Buttons.module.css"],"names":["Buttons","options","onChange","className","s","buttonList","map","option","btn","type","name","onClick","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","App","state","handleButtonChange","e","setState","prevState","target","this","Object","keys","countTotalFeedback","values","reduce","acc","value","countPositiveFeedbackPercentage","Math","round","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"6QAGe,SAASA,EAAT,GAAyC,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SACzC,OACE,oBAAIC,UAAWC,IAAEC,WAAjB,SACGJ,EAAQK,KAAI,SAAAC,GAAM,OACjB,6BACE,wBACEJ,UAAWC,IAAEI,IACbC,KAAK,SACLC,KAAMH,EACNI,QAAST,EAJX,SAMGK,KAPIA,QCLF,SAASK,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,4BAAIA,ICCE,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,qCACE,4CACCD,EAAQ,EACP,qCACE,uCAAUH,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDACsBC,EAAqB,EAAIA,EAAqB,EADpE,UAMF,cAACP,EAAD,CAAcC,QAAQ,yBCxBf,SAASO,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,qCACE,mCAAMD,KACN,8BAAMC,O,ICASC,E,4MACnBC,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPQ,mBAAqB,SAAAC,GACnB,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAEG,OAAOnB,KAAOkB,EAAUF,EAAEG,OAAOnB,MAAQ,O,4CAGhD,WAAU,IAAD,EACwBoB,KAAKN,MAA5BT,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBhB,EAAU8B,OAAOC,KAAKF,KAAKN,OAC3BS,EAAqBF,OAAOG,OAAOJ,KAAKN,OAAOW,QACnD,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IACtB,GAEIC,EAAkCC,KAAKC,MAC1CV,KAAKN,MAAMT,KAAOkB,EAAsB,KAE3C,OACE,eAACb,EAAD,CAASC,MAAM,wBAAf,UACE,cAACrB,EAAD,CAASC,QAASA,EAASC,SAAU4B,KAAKL,qBAC1C,cAACX,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOe,EACPd,mBAAoBmB,W,GA9BGG,aCMlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,IAAM,qBAAqB,WAAa,+B","file":"static/js/main.6f19b8e9.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport s from './Buttons.module.css';\r\n\r\nexport default function Buttons({ options, onChange }) {\r\n  return (\r\n    <ul className={s.buttonList}>\r\n      {options.map(option => (\r\n        <li key={option}>\r\n          <button\r\n            className={s.btn}\r\n            type=\"button\"\r\n            name={option}\r\n            onClick={onChange}\r\n          >\r\n            {option}\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nButtons.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport default function Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nimport Notification from '../Notification/Notification';\r\n\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) {\r\n  return (\r\n    <>\r\n      <h1>STATISTICS</h1>\r\n      {total > 0 ? (\r\n        <>\r\n          <p>Good: {good}</p>\r\n          <p>Neutral: {neutral}</p>\r\n          <p>Bad: {bad}</p>\r\n          <p>Total: {total}</p>\r\n          <p>\r\n            Positive feedback: {positivePercentage > 0 ? positivePercentage : 0}\r\n            %\r\n          </p>\r\n        </>\r\n      ) : (\r\n        <Notification message=\"No feedback given\" />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <>\r\n      <h1> {title}</h1>\r\n      <div>{children}</div>\r\n    </>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n","import { Component } from 'react';\n\nimport Buttons from './Components/Buttons/Buttons';\nimport Statistics from './Components/Statistics/Statistics';\nimport Section from './Components/Section/Section';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleButtonChange = e => {\n    this.setState(prevState => ({\n      [e.target.name]: prevState[e.target.name] + 1,\n    }));\n  };\n  render() {\n    const { good, neutral, bad } = this.state;\n    const options = Object.keys(this.state);\n    const countTotalFeedback = Object.values(this.state).reduce(\n      (acc, value) => acc + value,\n      0,\n    );\n    const countPositiveFeedbackPercentage = Math.round(\n      (this.state.good / countTotalFeedback) * 100,\n    );\n    return (\n      <Section title=\"PLEASE LEAVE FEEDBACK\">\n        <Buttons options={options} onChange={this.handleButtonChange} />\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback}\n          positivePercentage={countPositiveFeedbackPercentage}\n        />\n      </Section>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Buttons_btn__3DAuE\",\"buttonList\":\"Buttons_buttonList__1uQlu\"};"],"sourceRoot":""}